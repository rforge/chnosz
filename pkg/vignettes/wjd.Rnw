%% LyX 2.0.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[english,noae]{article}
\usepackage{mathpazo}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\usepackage[letterpaper]{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage{babel}
\usepackage[authoryear]{natbib}
\usepackage[unicode=true,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{pdftitle={Winding Journey Down (in Gibbs energy)},
 pdfauthor={Jeffrey M. Dick}}
\usepackage{breakurl}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
%\VignetteIndexEntry{Winding Journey Down (in Gibbs energy)}

% so DOIs in bibliography show up as hyperlinks
\newcommand*{\doi}[1]{\href{http://dx.doi.org/#1}{doi: #1}}

% for monospaced fonts
\usepackage{inconsolata}

\makeatother

\begin{document}

\title{Winding Journey Down (in Gibbs energy)}


\author{Jeffrey M. Dick}

\maketitle

\section{Introduction}

\texttt{wjd()} appeared in CHNOSZ version 0.9-8. It implements the
steepest descent algorithm for Gibbs energy minimization described
by White, Johnson and Dantzig, \citeyear{WJD58}. This vignette shows
some examples of its usage.

The arguments of \texttt{wjd()} have default values to simulate the
example problem given by \citealp{WJD58}. In their words, ``The
example taken is the determination of the composition of the gases
arising from the combustion of a stoichiometric mixture of hydrazine
and oxygen at 3500 $^{\circ}$K and a pressure of 750 psi ($\ln P_{\mathrm{atm}}$
=3.932).'' There are ten species included in this example. The value
of temperature is not explicitly considered by the algorithm, or in
the arguments to \texttt{wjd()}. Instead, the standard Gibbs energies
of the species, at the given temperature, are provided (in dimensionless
form, i.e. $\Delta G^{\circ}/RT$). Note that White et al., 1958 use
the terminology ``free energy'' and the notation $F^{\circ}$. The
term ``Gibbs energy'' and corresponding notation is used here.

The user is encouraged to read the help page for \texttt{wjd()} in
the CHNOSZ documentation for details of the implementation that are
not covered in this vignette. See also \citet{NPW+79} for a review
of alternative algorithms, especially for aqueous systems, which are
not the focus of the functions described here.

<<libraryCHNOSZ, echo=FALSE>>=
library(CHNOSZ)
@



\section{Is it winding?}

The ``winding'' in the title refers to the observation that the
abundances of species during a Gibbs energy minimization often do
not all change in a monotonic fashion. This is becuase at each iteration
a new direction of steepest descent is calculated; this direction
is a vector of changes of mole numbers of all species in the system
and is subject to mass balance constraints as well as the steepest-descent
criterion.

Let's run \texttt{wjd()} with its default settings and save the output.

<<wjd>>=
w <- wjd()
@
What are the most abundant species, and how many iterations were taken?

<<abundant>>=
# the order of species abundance
oX <- order(w$X, decreasing=TRUE)
# the stoichiometries of the two most abundant species
w$A[head(oX,2),]
# the number of iterations
niter <- length(w$lambda)
niter
@
<<abundantnames,echo=FALSE>>=
# the formulas of the two most abundant species
# use CHNOSZ's as.chemical.formula function, after 
# dropping elements with zero stoichiometry
f1 <- as.chemical.formula(w$A[oX[1],w$A[oX[1],]!=0])
f2 <- as.chemical.formula(w$A[oX[2],w$A[oX[2],]!=0])
@
We find that \Sexpr{f1} and \Sexpr{f2} are the most abundant species,
after \Sexpr{niter} iterations. 

Let's track their mole fractions through the iterations. Write a function
that returns the mole fractions of these two species, after a specified
number of iterations.

<<iterfun>>=
iterfun <- function(imax) {
  w <- wjd(imax=imax)
  x1 <- w$X[oX[1]]/sum(w$X)
  x2 <- w$X[oX[2]]/sum(w$X)
  return(list(x1=x1, x2=x2))
}
@
Then apply the function over the different numbers of iterations,
from 0 (initial conditions) to \Sexpr{niter}, and plot the values.

\setkeys{Gin}{width=0.6\textwidth}
<<iterplot, fig=TRUE>>=
sa <- sapply(0:niter, iterfun)
plot(t(sa), pch=as.character(0:niter), xlab=paste("x",f1), ylab=paste("x",f2))
@
\setkeys{Gin}{width=1.0\textwidth}


A bit of winding: the mole fractions of these two species increase
up to the third iteration, but at the fourth (and less so for the
fifth and sixth), their mole fractions decrease. This behavior is
consistent with a decrease in Gibbs energy at \emph{every} iteration;
that can be verified by inspecting the values in the \Sexpr{niter}-iteration
result:

<<Gdown>>=
diff(w$F.Y)
@
The decrease in Gibbs energy becomes smaller with every iteration,
as an equilibrium distribution of species is approached.


\section{Is it near the bottom? Testing for equilibrium}


\subsection{Change in Gibbs energy of the system becomes small}

Equilibrium is synonymous with a global Gibbs energy minimum. Becoming
convinced that the output from \texttt{wjd()} represents a near-equilibrium
condition can be difficult. One type of observation that can be helpful
is the amount of change during the iterations of the algorithm. As
equilibrium is approached, it makes sense that the fractional decreases
in Gibbs energy would become smaller and smaller. This is used as
a stopping condition in the current implementation -- if the fractional
change, relative to the total energy of the system, reaches the value
of \texttt{Gfrac} given in the arguments the iterations stop. Here
are the fractional changes with each iteration:

<<Gfrac>>=
diff(w$F.Y)/w$F.Y[1:6]
@
Only the last value is below the default value of \texttt{Gfrac} in
\texttt{wjd()}.


\subsection{Chemical potentials of the elements (from different species represnting
them) become more uniform}

Equilibrium is also synonymous with uniformity of chemical potentials
($\mu$) of the thermodynamic components throughout the system. For
the default system in \texttt{wjd()}, and perhaps other systems of
interest, the elements themselves are an allowable definition of the
components. Often, the number and compositions of the species are
such that multiple combinations of species satisfying certain stoichiometric
conditions (i.e., eligible to be a basis set) can be used to compute
the chemical potentials of the elements. At equilibrium, these different
combinations of species would all yield the same chemical potentials
of the elements. 

There is a supporting function, \texttt{element.potentials()}, that
computes the chemical potentials of the elements using different eligible
combinations of species. It has an option to plot the results. Let's
first look at a plot showing the results after 3 iterations instead
of 6. 

\setkeys{Gin}{width=0.6\textwidth}
<<w3_ep_plot, fig=TRUE>>=
w3 <- wjd(imax=3)
ep3 <- element.potentials(w3, plot.it=TRUE)
@
\setkeys{Gin}{width=1.0\textwidth}


Here's the plot for the default settings of \texttt{wjd()}:

\setkeys{Gin}{width=0.6\textwidth}
<<w_ep_plot, fig=TRUE>>=
ep <- element.potentials(w, plot.it=TRUE)
@
\setkeys{Gin}{width=1.0\textwidth}


That one shows considerably less deviation than the first plot. The
differences don't become zero, but perhaps they are small enough to
accept as an operational solution. There is a function, \texttt{is.near.equil()},
that provides a logical type result based on the range of chemical
potentials of the elements calculated from the different eligible
species combinations. It says ``TRUE'' if the maximum difference
for any element is below $\mu/RT=0.01$, but this limit can be changed
through the tol argument to the function. With the default setting,
is.near.equil() does give a different answer for the 3- and 6-iteration
results:

<<w_ep_plot>>=
is.near.equil(w3)
is.near.equil(w)
@



\subsection{Different initial solutions yield similar results}

Although it seems to be the case in the examples shown so far, increasing
the number of iterations does not necessarily bring one closer to
true equilibrium, since being trapped in a local energy minimum is
a possibility. Sometimes local minima can be shown to exist by starting
with different mole numbers of species, that still yield the same
bulk composition (mole numbers of elements). \texttt{guess()} exists
to facilitate this sort of investigation. Its input the stoichiometric
matrix of species in the system (the default refers to the same system
as in \texttt{wjd()}) and the bulk composition; it outputs one set
or a series of sets of mole numbers of species that satisfy the bulk
composition constraints. In general, this in an underdeterimned problem,
so there are usually an infinite number of possible solutions. For
the methods used in the function to generate the guesses, refer to
the help page and the comments in the function code itself. For now
let's compare the guess made by \texttt{guess()} with the default
species composition in \texttt{wjd()} (that is taken from \citealp{WJD58}).

<<guessw12>>=
as.list(args(wjd))$Y
Y1 <- guess()
Y1
@


Now let's run the minimization using the first guess, count the number
of iterations, and test it for equilibrium and also make a plot showing
the chemical potentials of the elements.

\setkeys{Gin}{width=0.6\textwidth}
<<minguess1, fig=TRUE>>=
wY1 <- wjd(Y=Y1)
niterY1 <- length(wY1$lambda)
niterY1
is.near.equil(wY1)
epY1 <- element.potentials(wY1, plot.it=TRUE)
@
\setkeys{Gin}{width=0.6\textwidth}
Whoa, those differences are a lot smaller than the chemical potentials
of the elements resulting from the default initial solution of mole
numbers of species! Also note that there were \Sexpr{niterY1-niter}
more iterations than using the default solution in \texttt{wjd()}. 

Not all guesses lead to the same conclusion. Let's make a simple test
for closeness to equilibrium of all of the guesses available from
\texttt{guess()} for the default set of species and bulk composition.
First generate all of the guesses. Note that \texttt{guess()} returns
NA for compositionally eligible combinations of species that have
some negative mole numbers, so we filter those out.

<<allguesses>>=
Ys <- guess(iguess=NULL)
# total number of species combinations
length(Ys)
# species combinations that have all-positive mole numbers
iYs <- which(!is.na(Ys))
nguess <- length(iYs)
nguess
@
Now let's run the minimization using each of those guesses, and test
if each one \texttt{is.near.equil()}:

<<allguess.equil>>=
sapply(iYs,function(i) is.near.equil(wjd(Y=Ys[[i]])))
@
Looks like they are. What if we're really picky though and want to
make sure the chemical potentials of the elements are very well-defined?
We can decrease the tolerance of is.near.equil():

<<allguess.equil.2>>=
sapply(iYs,function(i) is.near.equil(wjd(Y=Ys[[i]]),tol=0.0001))
@
Well some of the tests failed. But maybe this is because we have stopped
iterating too soon. Let's iterate until a we have smaller change in
Gibbs energy of the system:

<<allguess.equil.3>>=
sapply(iYs, function(i) {
  is.near.equil(wjd(Y=Ys[[i]], Gfrac=1e-9), tol=0.0001)
})
@
We're back to passing all of the equilibrium tests based on uniformity
of chemical potentials of the elements. What is the difference between
the resulting species abundances for the first and last ones, relative
to the species abundances in the first?

<<firstlast.species>>=
wYfirst <- wjd(Y=guess(iguess=1), Gfrac=1e-9)
wYlast <- wjd(Y=guess(iguess=nguess), Gfrac=1e-9)
(wYfirst$X - wYlast$X) / wYfirst$Y
@
Based on this exercise, starting from different initial species abundances
for the same bulk composition, and arriving at a similar near-equilibrium
solution, we can be fairly confident that we haven't gotten stuck
in a local minimum.

(In fact, for ideal reactions in closed chemical systems there is
only a unique solution \citep{Oth76}. Therefore, the algorithm should
converge on the same result for any initial vector of species mole
numbers with the same bulk composition.)


\section{Running Down: Using a Thermodynamic Database}

So far the examples shown here have been based on the chemical system
defined by the default settings for the arguments to the functions.
What if we're interested in a different system? It can be rather tedious
to manually construct the stoichiometric matrices and vectors of standard
Gibbs energies of the species. The function \texttt{run.wjd()} pulls
the compositional and thermodynamic data for requested species from
the thermodynamic database and then calls \texttt{wjd()}.


\subsection{At a single temperature}

Let's start by finding the indices in the thermodynamic database of
some liquid alkanes and aromatic compounds:

<<alkanes_aromatics>>=
alkanes <- c("n-hexane", "n-heptane", "n-octane", "n-nonane")
ialk <- info(alkanes, "liq")
aromatics <- c("naphthalene", "anthracene", "phenanthrene", "pyrene")
iaro <- info(aromatics, "liq")
@


Let's find the equilibrium distribution of species for a bulk composition
corresponding to a single mole of each species.

<<run_aa>>=
waa <- run.wjd(c(ialk, iaro), Y=rep(1, 8))
waa$elements
is.near.equil(waa)
@


The \texttt{waa\$elements} shows that the bulk chemical composition
in the Gibbs energy minimization was $\mathrm{C_{84}H_{106}}$ (H/C
= 1.261905). That FALSE means the chemical potentials of the elements
calculated from different combinations of species differ by more than
0.01, the default setting of \texttt{tol} in \texttt{is.near.equil()}.
We can make it TRUE by running more iterations:

<<run_aa_equil>>=
waa <- run.wjd(c(ialk, iaro), Y=rep(1, 8), imax=12, Gfrac=1e-14)
is.near.equil(waa)
@


Let's plot the abundances of the species:

<<barplot_aa, fig=TRUE>>=
bp <- barplot(waa$X, ylab="moles")
text(bp, rep(0.2,8), c(alkanes, aromatics), srt=90, adj=0)
@


Now let's calculate the chemical potentials of the elements (dimensionless
values, $\mu/RT$) ...

<<equil_potentials_aa>>=
ep <- equil.potentials(waa)
print(ep)
basis(c("graphite", "H2"), c("cr", "gas"))
basis.logact(ep)
@


... and the corresponding logarithms of chemical activities of a set
of basis species:

<<basis_logact_aa>>=
basis(c("graphite", "H2"), c("cr", "gas"))
basis.logact(ep)
@



\subsection{Bulk composition instead of moles of species}

run.wjd() can be given B (bulk chemical composition), instead of Y
(initial numbers of moles of species). When this happens, the function
tests the different initial compositions generated by guess() until
one is found that is near equilibrium. Here's an example:

<<run_aa_B, fig=TRUE>>=
waa <- run.wjd(c(ialk, iaro), B="C100H100")
bp <- barplot(waa$X, ylab="moles")
text(bp, rep(0.2,8), c(alkanes, aromatics), srt=90, adj=0)
@


Compared with the previous example, here the lower H/C = 1 defines
a more oxidized system, so the increase in aromatic content is expected.


\section{Document Information}

Revision history
\begin{itemize}
\item 2012-01-01 Initial version
\item 2012-06-16 Running Down using alkanes and aromatics
\end{itemize}
R session information

\bibliographystyle{plainnat}
\bibliography{vig}

\end{document}
